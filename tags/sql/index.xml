<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on 摆人日寄</title>
    <link>https://hugo.crossentropy.me/tags/sql/</link>
    <description>Recent content in SQL on 摆人日寄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hant</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Sun, 18 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.crossentropy.me/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL 基础实践（三）</title>
      <link>https://hugo.crossentropy.me/posts/sql-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B03/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.crossentropy.me/posts/sql-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B03/</guid>
      <description>数据类型是限制我们可以在表里存储什么数据的一种方法。不过，对于许多应用来说， 这种限制实在是太粗糙了。比如，一个包含产品价格的字段应该只接受正数。 但是没有哪种标准数据类型只接受正数。 另外一个问题是你可能需要根据其它字段或者其它行的数据来约束字段数据。比如， 在一个包含产品信息的表中，每个产品编号都应该只有一行。
对于这些问题，SQL 允许你在字段和表上定义约束。约束允许你对数据施加任意控制。 如果用户企图在字段里存储违反约束的数据，那么就会抛出一个错误。 这种情况同时也适用于数值来自默认值的情况。
外键约束声明一个字段 (或者一组字段) 的数值必须匹配另外一个表中出现的数值。 创建外键约束的前提是，该外键所在的表已经存在，并且外键必须是 UNIQUE 的。（主键默认 UNIQUE 且 NOT NULL）
CREATE TABLE &amp;lt;表名&amp;gt; ( &amp;lt;字段名&amp;gt; &amp;lt;类型&amp;gt; PRIMARY KEY, &amp;lt;字段名&amp;gt; &amp;lt;类型&amp;gt; REFERENCES &amp;lt;外键所在的表名&amp;gt; (&amp;lt;字段名&amp;gt;), -- 这创建了一个外键 ... ); 还有另一种语法，它支持以多个字段为外键（字段约束也可以写成表约束，也就是放在一个独立的行中。而反过来很可能不行）：
CREATE TABLE &amp;lt;表名&amp;gt; ( &amp;lt;字段名1&amp;gt; &amp;lt;类型&amp;gt; PRIMARY KEY, &amp;lt;字段名2&amp;gt; &amp;lt;类型&amp;gt; &amp;lt;字段名3&amp;gt; &amp;lt;类型&amp;gt; ... FOREIGN KEY (&amp;lt;字段名2&amp;gt;, &amp;lt;字段名3&amp;gt;) REFERENCES &amp;lt;外键所在的表名&amp;gt; (&amp;lt;字段名4&amp;gt;, &amp;lt;字段名5&amp;gt;) ); 一个表也可以包含多个外键约束。这个特性用于实现表之间的多对多关系。 比如你有关于产品和订单的表，但现在你想允许一个订单可以包含多种产品 (上面那个结构是不允许这么做的)，你可以使用这样的结构：
CREATE TABLE products ( product_no integer PRIMARY KEY, name text, price numeric ); CREATE TABLE orders ( order_id integer PRIMARY KEY, shipping_address text, .</description>
    </item>
    
    <item>
      <title>SQL 基础实践（二）</title>
      <link>https://hugo.crossentropy.me/posts/sql-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.crossentropy.me/posts/sql-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</guid>
      <description>本笔记整理自《SQL 基础教程》、《MySQL 必知必会》和网上资料。个人笔记不保证正确。
将 SELECT 查询包装成一个虚拟表，该虚拟表就被称为视图。（因为只是一个包装，因此视图的数据也会随着原表的更新而更新）
用途： 简化复杂的 SQL 查询，用它替换子查询，能降低查询的嵌套深度。 SELECT 查询的重用，减少重复查询。 … 创建视图： CREATE VIEW &amp;lt;视图名称&amp;gt; (&amp;lt;视图列名1&amp;gt;, &amp;lt;视图列名2&amp;gt;... ) AS &amp;lt;SELECT 语句&amp;gt;; 其中 SELECT 的结果列和视图列名一一对应。 3. 视图的限制 1. 视图的 SELECT 子句，不能包含 ORDER BY 子句。因为视图也是表，而表是集合，它没有顺序。（也有些 DB 支持该用法，但不通用） 1. 视图的更新：只在很有限的条件下，才能在视图上使用 INSERT/DELETE/UPDATE 这样的变更数据的语句。（视图应该只用于检索，能不更新就不要更新它） 4. 删除视图：DROP VIEW &amp;lt;视图名称&amp;gt;;
子查询，其实就是一次性的视图:
SELECT ... FROM ( SELECT ... -- 这就是一个子查询：嵌套的 select 语句 ) AS &amp;lt;别名&amp;gt; ... 上面的查询的 FROM 子句中，给另一 SELECT 子句定义了一个别名，并将它作为了查询对象。这就是一个子查询。
子查询不仅能用于 FROM，还能用在 WHERE 子句等很多地方。</description>
    </item>
    
    <item>
      <title>SQL 基础实践（一）</title>
      <link>https://hugo.crossentropy.me/posts/sql-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.crossentropy.me/posts/sql-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B01/</guid>
      <description>本笔记整理自《SQL 基础教程》、《MySQL 必知必会》和网上资料。个人笔记不保证正确。
SQL，即结构化查询语言，是为访问与操作关系数据库中的数据而设计的语言。
关系数据库以行 (row) 为单位读写数据 SQL 根据功能的不同，可分为三类（其中 DML 用得最多，增删查改嘛） DDL(Data Definition Language, 数据定义语言): CREATE/DROP/ALTER DML(Data Manipulation Language, 数据操作语言): SELECT/INSERT/UPDATE/DELETE DCL(Data Control Language, 数据控制语言): COMMIT/ROLLBACK/GRANT/REVOKE SQL 语句要以分号结尾。换行在 SQL 中不表示结束，而等同于空格。 SQL 不区分 ** 关键字 (Keyword)** 的大小写，但是描述符就不一定了。 这里有个坑：MySQL 中，数据库和表其实就是数据目录下的目录和文件，因而，操作系统的敏感性决定数据库名和表名 是否大小写敏感。这就意味着数据库名和表名在 Windows 中是大小写不敏感的，而在大多数类型的 Unix/Linux 系统中是大小写敏感的。（注意仅指数据库名和表名）可通过修改配置文件的lower_case_table_names属性来统一这一行为。 而字段名、字段内容都是内部数据，是操作系统无关的。它们的大小写敏感性，由 MySQL 的的校对（COLLATE）规则来控制。该规则体现在 MySQL 的 校对字符集（COLLATION）的后缀上：比如 utf8 字符集，utf8_general_ci表示不区分大小写，这个是 utf8 字符集默认的校对规则；utf8_general_cs 表示区分大小写，utf8_bin 表示二进制比较，同样也区分大小写 。 SQL 中的字符串和日期需要用单引号引用起来，日期有特定格式年-月-日 修改字符集：set names &amp;lt;字符集名&amp;gt; 记住在 MySQL 中，utf-8mb4 才是完全的 utf-8 字符集。
创建数据库 CREATE DATABASE &amp;lt;数据库名称&amp;gt;; 关系表的设计，要确保把信息分解成多个表，一类信息一个表，各表通过某些常用的，基本不会改变的值（即关系表设计中的关系，也常称为外键）互相关联。尽量不要有冗余数据。</description>
    </item>
    
  </channel>
</rss>
