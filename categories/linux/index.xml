<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 摆人日寄</title>
    <link>https://hugo.crossentropy.me/categories/linux/</link>
    <description>Recent content in Linux on 摆人日寄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hant</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Thu, 14 Nov 2019 11:25:05 -0400</lastBuildDate><atom:link href="https://hugo.crossentropy.me/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>socat&amp;&amp;netcat最佳实践.</title>
      <link>https://hugo.crossentropy.me/posts/-socat-netcat/</link>
      <pubDate>Thu, 14 Nov 2019 11:25:05 -0400</pubDate>
      
      <guid>https://hugo.crossentropy.me/posts/-socat-netcat/</guid>
      <description>文中的命令均在 macOS Big Sur 和 openSUSE Tumbleweed 上测试通过
netcat(network cat) 是一个历史悠久的网络工具包，被称作 TCP/IP 的瑞士军刀，各大 Linux 发行版都有默认安装 openbsd 版本的 netcat，它的命令行名称为 nc.
而 socat(socket cat)，官方文档描述它是 &amp;quot;netcat++&amp;quot; (extended design, new implementation)，项目比较活跃，kubernetes-client(kubectl) 底层就是使用的它做各种流量转发。
在不方便安装 socat 的环境中，我们可以使用系统自带的 netcat. 而在其他环境，可以考虑优先使用 socat.
socat 的基本命令格式：
给 socat 提供两个地址，socat 干的活就是把两个地址的流对接起来。左边地址的输出传给右边，同时又把右边地址的输出传给左边，也就是一个双向的数据管道。
听起来好像没啥特别的，但是实际上计算机网络干的活也就是数据传输而已，却影响了整个世界，不可小觑它的功能。
socat 支持非常多的地址类型：-/stdio，TCP, TCP-LISTEN, UDP, UDP-LISTEN, OPEN, EXEC, SOCKS, PROXY 等等，可用于端口监听、链接，文件和进程读写，代理桥接等等。
socat 的功能就是这么简单，命令行参数也很简洁，唯一需要花点精力学习的就是它各种地址的定义和搭配写法。 · 而 netcat 定义貌似没这么严谨，可以简单的理解为网络版的 cat 命令 2333
各发行版都自带 netcat，包名通常为 nc-openbsd，因此这里只介绍 socat 的安装方法：
# Debian/Ubuntu sudo apt install socat # CentOS/RedHat sudo yum install socat # macOS brew install socat 其他发行版基本也都可以使用包管理器安装 socat</description>
    </item>
    
    <item>
      <title>Linux 中的虚拟网络接口</title>
      <link>https://hugo.crossentropy.me/posts/linux-%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.crossentropy.me/posts/linux-%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3/</guid>
      <description>本文用到的字符画工具：vscode-asciiflow2
注意: 本文中使用 ip 命令创建或修改的任何网络配置，都是未持久化的，主机重启即消失。
Linux 具有强大的虚拟网络能力，这也是 openstack 网络、docker 容器网络以及 kubernetes 网络等虚拟网络的基础。
这里介绍 Linux 常用的虚拟网络接口类型：TUN/TAP、bridge、veth、ipvlan/macvlan、vlan 以及 vxlan/geneve.
tun/tap 是操作系统内核中的虚拟网络设备，他们为用户层程序提供数据的接收与传输。
普通的物理网络接口如 eth0，它的两端分别是内核协议栈和外面的物理网络。
而对于 TUN/TAP 虚拟接口如 tun0，它的一端一定是连接的用户层程序，另一端则视配置方式的不同而变化，可以直连内核协议栈，也可以是某个 bridge（后面会介绍）。 Linux 通过内核模块 TUN 提供 tun/tap 功能，该模块提供了一个设备接口 /dev/net/tun 供用户层程序读写，用户层程序通过 /dev/net/tun 读写主机内核协议栈的数据。
&amp;gt; modinfo tun filename: /lib/modules/5.13.6-1-default/kernel/drivers/net/tun.ko.xz alias: devname:net/tun alias: char-major-10-200 license: GPL author: (C) 1999-2004 Max Krasnyansky &amp;lt;maxk@qualcomm.com&amp;gt; description: Universal TUN/TAP device driver ... &amp;gt; ls /dev/net/tun /dev/net/tun 一个 TUN 设备的示例图如下：
+----------------------------------------------------------------------+ | | | +--------------------+ +--------------------+ | | | User Application A | | User Application B +&amp;lt;-----+ | | +------------+-------+ +-------+------------+ | | | | 1 | 5 | | |.</description>
    </item>
    
  </channel>
</rss>
