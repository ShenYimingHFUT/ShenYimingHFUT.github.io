<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 摆人日寄</title>
    <link>https://shenyiminghfut.github.io/posts/</link>
    <description>Recent content in Posts on 摆人日寄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hant</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Sat, 12 Mar 2022 10:58:08 -0400</lastBuildDate><atom:link href="https://shenyiminghfut.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP状态码速查表</title>
      <link>https://shenyiminghfut.github.io/posts/http-%E7%8A%B6%E6%80%81%E7%A0%81%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Sat, 12 Mar 2022 10:58:08 -0400</pubDate>
      
      <guid>https://shenyiminghfut.github.io/posts/http-%E7%8A%B6%E6%80%81%E7%A0%81%E9%80%9F%E6%9F%A5/</guid>
      <description>HTTP 状态码是表示一次 HTTP 请求的响应状态，是网页可用性的重要指标。
  [HTTP 状态码] &amp;ldquo;HTTP状态码&amp;rdquo;)（HTTP Status Code）是用来表示网页服务器 HTTP 响应状态的 3 位数字代码。下面列出了常见的网页 HTTP 状态码及其含义，供参考。更多不常见的 HTTP 状态的含义，请参考 RFC 2616 规范。
 1xx 状态：表示临时响应 1xx 系列状态码，表示请求已收到，需要请求者继续执行操作的状态代码。
继续（Continue）
请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部
切换协议（Switching Protocols）
请求者已要求服务器切换协议，服务器已确认并做好了的切换的准备
2xx 状态：表示成功响应 2xx 系列状态码，表示成功处理了请求的状态代码。
成功（Success）
服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页
已创建（Created）
请求成功，并且服务器创建了新的资源
已接受（Accepted）
服务器已接受请求，但尚未处理
非授权信息（Non Authoritative Information）
服务器已成功处理了请求，但返回的信息可能来自另一来源
从 HTTP/1.1 开始支持
无内容（No Content）
服务器成功处理了请求，但没有返回任何内容
重置内容（Reset Content）
服务器成功处理了请求，但没有返回任何内容。该响应要求浏览器重置它所显示的内容
部分内容（Partial Content）
由于客户端发送了 range 头信息，服务器成功返回了部分资源
该状态码由 RFC 7233 定义
3xx 状态：表示重定向 3xx 系列状态码，表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</description>
    </item>
    
    <item>
      <title> Vim 常用的命令</title>
      <link>https://shenyiminghfut.github.io/posts/vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Tue, 09 Mar 2021 10:58:08 -0400</pubDate>
      
      <guid>https://shenyiminghfut.github.io/posts/vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</guid>
      <description>记录了 Vim 编辑器常用命令速查功能，这些命令分为全局命令、光标移动、插入模式、文本编辑、缩进、复制、查找 / 替换、宏、寄存器、标签、差异比较等常用的 Vim 命令，是每位 Vim 使用者必备的参考资料。
  本速查表按分类列出了 Vim 常用的命令和快捷键，数量较多，可使用 Ctrl + F 进行查找。
 全局命令 命令 / 快捷键功能描述:h[elp] 关键字显示指定关键字的帮助:sav[eas] 文件名另存为...:clo[se]关闭当前窗口:ter[minal]打开新的终端窗口K打开光标所在单词对应的 man 页面 移动光标 命令 / 快捷键功能描述h左移光标j下移光标k上移光标l右移光标H移动到当前页面顶部M移动到当前页面中间L移动到当前页面底部w移动到下个单词开头W移动到下个单词开头（单词含标点）e移动到下个单词结尾E移动到下个单词结尾（单词含标点）b移动到上个单词开头B移动到上个单词开头（单词含标点）%跳转到配对的符号0移动到行首^移动到行首的非空白符$移动到行尾g_移动到行内最后一个非空白符gg移动到文件第一行G移动到文件最后一行5gg 或 5G移动到第 5 行fx移动到字符 x 下次出现的位置tx移动到字符 x 下次出现的位置的前一个字符Fx移动到字符 x 上次出现的位置Tx移动到字符 x 上次出现的位置的后一个字符;重复之前的 f、t、F、T 操作,反向重复之前的 f、t、F、T 操作}移动到下一个段落（当编辑代码时则为函数／代码块）{移动到上一个段落（当编辑代码时则为函数／代码块）zz移动屏幕使光标居中Ctrl + e向下移动屏幕一行（保持光标不动）Ctrl + y向上移动屏幕一行（保持光标不动）Ctrl + b向上滚动一屏Ctrl + f向下滚动一屏Ctrl + d向下滚动半屏Ctrl + u向上滚动半屏 插入模式（插入 / 追加文本） 命令 / 快捷键功能描述i从光标前开始插入字符I从行首开始插入字符a从光标后开始插入字符A从行尾开始插入字符o在当前行之下另起一行，开始插入字符O在当前行之上另起一行，开始插入字符ea从当前单词末尾开始插入Ctrl + h在插入模式下，删除光标前的字符Ctrl + w在插入模式下，删除光标前的单词Ctrl + j在插入模式下，另起一行Ctrl + t在插入模式下，向右缩进，宽度由 shiftwidth 控制Ctrl + d在插入模式下，向左缩进，宽度由 shiftwidth 控制Ctrl + n在插入模式下，在光标之前插入自动补全的下一个匹配项Ctrl + p在插入模式下，在光标之前插入自动补全的上一个匹配项Ctrl + rx在当前光标处插入 x 寄存器的内容Esc退出插入模式 编辑文本 命令 / 快捷键功能描述r替换当前字符J将下一行合并到当前行，并在两部分文本之间插入一个空格gJ将下一行合并到当前行，两部分文本之间不含空格gwip重新调整段落g~切换整个文本的大小写（即大写变小写，小写变大写）gu把整个文本改成小写gU把整个文本改成大写cc 或 S将光标所在的行删除，然后进入插入模式C 或 c$删除光标所在位置到行尾的所有文本，然后进入插入模式ciw将光标所在的单词删除，然后进入插入模式cw从光标位置开始，修改单词s删除当前字符，然后进入插入模式xp将当前字符后移uundo - 撤销最近一次操作U恢复 / 撤销最后修改的行Ctrl + rredo - 重做（和 u 相反）.</description>
    </item>
    
    <item>
      <title>中文文本测试</title>
      <link>https://shenyiminghfut.github.io/posts/chinese/</link>
      <pubDate>Thu, 14 Nov 2019 11:25:05 -0400</pubDate>
      
      <guid>https://shenyiminghfut.github.io/posts/chinese/</guid>
      <description>这样看来， 邓拓在不经意间这样说过，越是没有本领的就越加自命不凡。这不禁令我深思。 我们不得不面对一个非常尴尬的事实，那就是， 一般来说， 所谓中午吃什么，关键是中午吃什么需要如何写。 伏尔泰说过一句富有哲理的话，坚持意志伟大的事业需要始终不渝的精神。这启发了我， 那么， 对我个人而言，中午吃什么不仅仅是一个重大的事件，还可能会改变我的人生。 这样看来， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 一般来讲，我们都必须务必慎重的考虑考虑。 黑格尔说过一句富有哲理的话，只有永远躺在泥坑里的人，才不会再掉进坑里。这启发了我， 我们不得不面对一个非常尴尬的事实，那就是， 既然如何， 在这种困难的抉择下，本人思来想去，寝食难安。
　我认为， 而这些并不是完全重要，更加重要的问题是， 了解清楚中午吃什么到底是一种怎么样的存在，是解决一切问题的关键。 中午吃什么因何而发生？ 而这些并不是完全重要，更加重要的问题是， 卢梭在不经意间这样说过，浪费时间是一桩大罪过。这启发了我， 既然如此， 从这个角度来看， 歌德在不经意间这样说过，意志坚强的人能把世界放在手中像泥块一样任意揉捏。我希望诸位也能好好地体会这句话。 我认为， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 莎士比亚在不经意间这样说过，人的一生是短的，但如果卑劣地过这一生，就太长了。带着这句话，我们还要更加慎重的审视这个问题： 带着这些问题，我们来审视一下中午吃什么。 中午吃什么因何而发生？ 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 布尔沃曾经说过，要掌握书，莫被书掌握；要为生而读，莫为读而生。这似乎解答了我的疑惑。 而这些并不是完全重要，更加重要的问题是， 生活中，若中午吃什么出现了，我们就不得不考虑它出现了的事实。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 带着这些问题，我们来审视一下中午吃什么。 生活中，若中午吃什么出现了，我们就不得不考虑它出现了的事实。 我认为， 一般来说， 中午吃什么，到底应该如何实现。 我们不得不面对一个非常尴尬的事实，那就是， 所谓中午吃什么，关键是中午吃什么需要如何写。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 现在，解决中午吃什么的问题，是非常非常重要的。
　我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 可是，即使是这样，中午吃什么的出现仍然代表了一定的意义。 带着这些问题，我们来审视一下中午吃什么。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 我认为， 问题的关键究竟为何？ 非洲曾经提到过，最灵繁的人也看不见自己的背脊。这启发了我， 易卜生说过一句富有哲理的话，伟大的事业，需要决心，能力，组织和责任感。这似乎解答了我的疑惑。 一般来说， 在这种困难的抉择下，本人思来想去，寝食难安。 中午吃什么，到底应该如何实现。 经过上述讨论， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 中午吃什么因何而发生？ 带着这些问题，我们来审视一下中午吃什么。 对我个人而言，中午吃什么不仅仅是一个重大的事件，还可能会改变我的人生。</description>
    </item>
    
    <item>
      <title>Git命令速查表</title>
      <link>https://shenyiminghfut.github.io/posts/git-%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Tue, 09 Apr 2019 10:58:08 -0400</pubDate>
      
      <guid>https://shenyiminghfut.github.io/posts/git-%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</guid>
      <description>Git 是一款流行的版本管理工具，熟练使用 Git 命令是用好 Git 的基础。本参考表提供了常用 Git 命令的速查功能，是技术开发人员必备的参考资料。
 创建命令 Git 命令说明git clone &amp;lt;url&amp;gt;克隆远程仓库git init初始化本地 git 仓库（即创建新的本地仓库） 本地更改 Git 命令说明git status查看当前分支状态git diff查看已跟踪文件的变更git add &amp;lt;file&amp;gt;将指定的文件添加到暂存区git add .将所有有变更的文件添加到暂存区git commit -a提交所有本地修改git commit -m &#34;xxx&#34;把已添加至暂存区的文件执行提交，并以 xxx 作为本次提交的描述git commit --amend -m &#34;xxx&#34;修改上一次提交（请勿用该命令修改已发布的提交）git commit -am &#34;xxx&#34;该命令是 git add . 和 git commit -m &#34;xxx&#34; 的快捷方式git stash暂存当前修改，将所有置为 HEAD 状态git stash list查看所有暂存列表git stash push把当前工作区的文件暂存到临时空间git stash pop把文件从临时空间中恢复到当前工作区 提交历史 Git 命令说明git log查看提交日志git log -n显示 n 行日志，n 为整数git log --stat查看本地提交日志git show &amp;lt;commit&amp;gt;查看提交日志及相关变动文件git show HEAD查看 HEAD 提交日志git show HEAD^查看 HEAD 的上一个版本提交日志。另外，git show HEAD^^ 是查看上 2 个版本的提交日志；git show HEAD^5 是查看上 5 个版本的提交日志git blame &amp;lt;file&amp;gt;对于指定文件，逐行显示提交的哈希 ID、提交者、提交日期以及修改的内容git whatchanged显示提交历史，以及每次提交变更的文件 分支和标签 Git 命令说明git branch查看本地分支git branch -r查看远程分支git branch -a查看所有分支（本地和远程）git branch --merged查看所有分支已合并到当前分支的分支git branch --no-merged查看所有分支未合并到当前分支的分支git branch -m &amp;lt;new-branch&amp;gt;把当前分支的名称改成 new-branch；如果 new-branch 已存在，将不会执行改名git branch -M &amp;lt;new-branch&amp;gt;强制把当前分支的名称改成 new-branch（即使 new-branch 已存在）git branch -m &amp;lt;old-branch&amp;gt; &amp;lt;new-branch&amp;gt;把分支 old-branch 的名称改成 new-branch，如果 new-branch 已存在，将不会执行改名git branch -M &amp;lt;old-branch&amp;gt; &amp;lt;new-branch&amp;gt;强制把分支 old-branch 的名称改成 new-branch（即使 new-branch 已存在）git checkout &amp;lt;branch-name&amp;gt;切换到 branch-name 分支git branch &amp;lt;new-branch&amp;gt;新建分支（也可以用 git checkout -b &amp;lt;new-branch&amp;gt;）git branch --track &amp;lt;new&amp;gt; &amp;lt;remote&amp;gt;基于远程分支创建一个新分支，同 git checkout --track &amp;lt;remote/branch&amp;gt;git branch -d &amp;lt;branch-name&amp;gt;删除本地分支git tag列出所有本地标签git tag &amp;lt;tag-name&amp;gt;基于最新的提交创建标签git tag -d &amp;lt;tag-name&amp;gt;删除标签 删除命令 Git 命令说明git rm &amp;lt;file&amp;gt;删除文件（将从磁盘中删除文件）git rm -r &amp;lt;directory&amp;gt;递归删除指定目录下的文件git rm --cached &amp;lt;file&amp;gt;停止跟踪文件，不会从磁盘中删除 合并和衍合 Git 命令说明git merge &amp;lt;branch&amp;gt;合并指定分支到当前分支，保留两个git rebase &amp;lt;branch&amp;gt;合并指定分支到当前分支，只保留一个git rebase --abort终止 rebase 操作，即回到执行 rebase 之前的状态git rebase --continue解决冲突后继续执行 rebasegit mergetool使用配置文件指定的 mergetool 解决冲突git add &amp;lt;resolved-file&amp;gt;</description>
    </item>
    
  </channel>
</rss>
